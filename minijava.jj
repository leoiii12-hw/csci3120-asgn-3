options {
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(MiniJavaParser)
  package myparser;

  import syntaxtree.*;
  public class MiniJavaParser {}
PARSER_END(MiniJavaParser)

SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN : 
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LSQPAREN: "[" >
| < RSQPAREN: "]" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < SEMICOLON: ";" >
| < DOT: "." >
| < ASSIGN: "=" >
| < LT: "<" >
| < PLUS: "+" >
| < MINUS: "-" >
| < AND : "&&" >
| < NOT : "!" >   
| < BOOLEAN: "boolean" >   
| < DOUBLE: "double" >
| < CLASS: "class" >
| < ELSE: "else" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < IF: "if" >
| < WHILE: "while" >
| < INTEGER: "int" >   
| < LENGTH: "length" >
| < MAIN: "main" >
| < NEW: "new" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < STATIC: "static" >
| < STRING: "String" >
| < THIS: "this" >
| < TRUE: "true" >
| < PRINT: "System.out.println" >
| < VOID: "void" >         
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}


/************************************
 * The MiniJava Grammar Starts Here *
 ************************************/


Program Goal() :
{ MainClass m; 
  ClassDeclList cl = new ClassDeclList();
  ClassDecl c;
}
{
  m=MainClass() 
  ( c=ClassDeclaration() { cl.addElement(c); } )*
  <EOF>
  { return new Program(m,cl); }
}

MainClass MainClass() :
{ Identifier i1,i2;
  Statement s; }
{
  "class" i1=Identifier() "{"
    "public" "static" "void" "main" "(" "String" "[" "]" i2=Identifier() ")"   
    "{" s=Statement() "}"
  "}"
  { return new MainClass(i1,i2,s); }
}

ClassDecl ClassDeclaration() :  
{ ClassDecl c; }
{
  ( 
  LOOKAHEAD(3)
  c=ClassDeclarationSimple()
|
  c=ClassDeclarationExtends()
  )
  { return c; }
}

ClassDecl ClassDeclarationSimple() :
{ Identifier i;
  VarDecl v;
  VarDeclList vl = new VarDeclList();
  MethodDecl m;
  MethodDeclList ml = new MethodDeclList();
}
{
  "class" { Token tk = token; } i=Identifier() "{" ( v=VarDeclaration()    { vl.addElement(v); } )*
                             ( m=MethodDeclaration() { ml.addElement(m); } )* 
                       "}"
  { ClassDeclSimple cds=new ClassDeclSimple(i,vl,ml); inject_token(cds,tk); return cds; }
}

ClassDecl ClassDeclarationExtends() :
{ Identifier i1,i2;
  VarDecl v;
  VarDeclList vl = new VarDeclList();
  MethodDecl m;
  MethodDeclList ml = new MethodDeclList();
}
{
  "class" { Token tk = token; } i1=Identifier() "extends" i2=Identifier()
                       "{"   ( v=VarDeclaration()    { vl.addElement(v); } )* 
                             ( m=MethodDeclaration() { ml.addElement(m); } )* 
                       "}"
  { ClassDeclExtends cde=new ClassDeclExtends(i1,i2,vl,ml); inject_token(cde,tk); return cde;  }
}

VarDecl VarDeclaration() :  
{ Type t;
  Identifier i;
}
{ 
  t=Type() { Token tk = token; } i=Identifier() ";"
  { return new VarDecl(t,i,tk); }
}

MethodDecl MethodDeclaration() :  
{ 
  Type t;
  Identifier i;
  FormalList fl = new FormalList();
  VarDecl v;
  VarDeclList vl = new VarDeclList();
  Statement s;
  StatementList sl = new StatementList();
  Exp e; 
}
{
  "public" { Token tk = token; } t=Type() i=Identifier()
  "(" ( fl=FormalParameterList() )? ")"   
  "{" ( LOOKAHEAD(2) v=VarDeclaration() { vl.addElement(v); } )* 
      ( s=Statement() { sl.addElement(s); } )* "return" e=Expression() ";" "}"
  { MethodDecl md=new MethodDecl(t,i,fl,vl,sl,e); inject_token(md,tk); return md; }
}

FormalList FormalParameterList() :
{ FormalList fl = new FormalList(); 
  Formal f;
}
{
  f=FormalParameter() { fl.addElement(f); }
  ( f=FormalParameterRest() { fl.addElement(f); } )*
  { return fl; }
}

Formal FormalParameter() :
{ Type t; 
  Identifier i;
}
{
  t=Type() { Token tk = token; } i=Identifier()
  { return new Formal(t,i, tk); }
}

Formal FormalParameterRest() :
{ Formal f; }
{
  "," f=FormalParameter()
  { return f; }
}

Type Type() :
{ Type t; }
{
  (
  LOOKAHEAD(3)
  t=ArrayType()
|
  t=BooleanType()
|
  t=IntegerType()
|
  t=DoubleType()
|
  t=IdentifierType()     
  )
  { return t; }
}

Type ArrayType() :
{}
{
  "int" "[" "]"
  { return new IntArrayType(); }
}

Type BooleanType() :
{}
{
  "boolean"
  { return new BooleanType(); }
}

Type IntegerType() :
{}
{
  "int"
  { return new IntegerType(); }
}

Type DoubleType() :
{}
{
  "double"
  { return new DoubleType(); }
}

Type IdentifierType() :
{ Token t; }
{
  t=<IDENTIFIER>
  { return new IdentifierType(t.image); }
}

Statement Statement() :
{ Statement s; }
{
  (
  s=Block()
| 
  LOOKAHEAD(2)
  s=AssignmentStatement()
|
  LOOKAHEAD(2)
  s=ArrayAssignmentStatement()
|
  s=IfStatement()
|
  s=WhileStatement()
|
  s=PrintStatement()
  )
  { return s; }
}

Statement Block() :
{ 
  Statement s;
  StatementList sl = new StatementList(); 
}
{
  "{" ( s=Statement() { sl.addElement(s); } )* "}"
  { return new Block(sl); }
}

Statement AssignmentStatement() :
{ Identifier i;
  Exp e; 
}
{
  i=Identifier() { Token tk=token; } "=" e=Expression() ";"
  { Assign as=new Assign(i,e); inject_token(as,tk); return as; }
}

Statement ArrayAssignmentStatement() :
{ Identifier i;
  Exp e1,e2;
}
{
  i=Identifier() { Token tk=token; } "[" e1=Expression() "]" "=" e2=Expression() ";"
  { ArrayAssign aa=new ArrayAssign(i,e1,e2,t); inject_token(aa,tk); return aa; }
}

Statement IfStatement() :
{ Exp e;
  Statement s1,s2;
}
{
  "if" "(" e=Expression() ")" s1=Statement() "else" s2=Statement() 
  { return new If(e,s1,s2); }
}

Statement WhileStatement() :
{ Exp e;
  Statement s;
}
{
  "while" "(" e=Expression() ")" s=Statement() 
  { return new While(e,s); }
}

Statement PrintStatement() :
{ Exp e; }
{
  "System.out.println" "(" e=Expression() ")" ";"
  { return new Print(e); }
}

/*
 * Expression syntax follows.
 */

Exp Expression() :
{ Exp e; }
{
  e=AndExpression()
  { return e; }
}

Exp AndExpression() :
{ Exp e1,e2; } 
{
  e1=CompareExpression()

  (
    LOOKAHEAD("&&")
    "&&" { Token tk=token; } e2=CompareExpression()
    { e1 = new And(e1,e2); inject_token(e1,tk); }
  )*

  { return e1; }
}

Exp CompareExpression() :
{ Exp e1,e2; } 
{
  e1=PlusExpression()

  [
    LOOKAHEAD("<")
    "<" { Token tk=token; } e2=PlusExpression()
    { e1 = new LessThan(e1,e2); inject_token(e1,tk); }
  ]

  { return e1; }
}

Exp PlusExpression() :
{ Exp e1,e2; } 
{
  e1=MinusExpression()

  (
    LOOKAHEAD("+")
    "+" { Token tk=token; } e2=MinusExpression()
    { e1 = new Plus(e1,e2); inject_token(e1,tk); }
  )*

  { return e1; }
}

Exp MinusExpression() :
{ Exp e1,e2; } 
{
  e1=TimesExpression()

  (
    LOOKAHEAD("-")
    "-" { Token tk=token; } e2=TimesExpression()
    { e1 = new Minus(e1,e2); inject_token(e1,tk); }
  )*

  { return e1; }
}

Exp TimesExpression() :
{ Exp e1,e2; } 
{
  e1=ArrayLookup()

  (
    LOOKAHEAD("*")
    "*" { Token tk=token; } e2=ArrayLookup()
    { e1 = new Times(e1,e2); inject_token(e1,tk); }
  )*

  { return e1; }
}

Exp ArrayLookup() :
{ Exp e1,e2; } 
{
  e1=ArrayLength()

  (
    LOOKAHEAD("[" ArrayLength())
    "[" { Token tk=token; } e2=ArrayLength() "]"
    { e1 = new ArrayLookup(e1,e2); inject_token(e1,tk); }
  )*

  { return e1; }
}

Exp ArrayLength() :
{ Exp e; }
{
  e=MessageSend()

  (
    LOOKAHEAD("." "length")
    "." { Token tk=token; } "length"
    { e = new ArrayLength(e); inject_token(e,tk); }
  )*

  { return e; }
}

Exp MessageSend() :
{ Exp e;
  Identifier i;
  ExpList el = new ExpList(); 
}
{
  e=PrimaryExpression()

  (
    LOOKAHEAD("." Identifier())
    "." { Token tk=token; } i=Identifier() "(" ( el=ExpressionList() )? ")"
    { e = new Call(e,i,el); inject_token(e,tk); }
  )*

  { return e; }
}

ExpList ExpressionList() :
{ Exp e1,e2;
  ExpList el = new ExpList();
}
{
  e1=Expression() 
  { el.addElement(e1); }
  ( e2=ExpressionRest() { el.addElement(e2); })*
  { return el; }
}

Exp ExpressionRest() :
{ Exp e; }
{
  "," e=Expression()
  { return e; }
}

Exp PrimaryExpression() :
{ Exp e; }
{ 
  (
  e=IntegerLiteral()
|
  e=FloatingPointLiteral()
|
  e=TrueLiteral()
|
  e=FalseLiteral()
|
  e=IdentifierExp()
|
  e=ThisExpression()
|
  LOOKAHEAD(3)
  e=ArrayAllocationExpression()
|
  e=AllocationExpression()
|   
  e=NotExpression()
|   
  e=BracketExpression()
  )
  { return e; }
}

Exp IntegerLiteral() :
{ Token t; }
{
  t=<INTEGER_LITERAL>
  { return new IntegerLiteral(Integer.parseInt(t.image)); }
}

Exp FloatingPointLiteral() :
{ Token t; }
{
  t=<FLOATING_POINT_LITERAL>
  { return new FloatingPointLiteral(Double.parseDouble(t.image)); }
}

Exp TrueLiteral() :
{}
{
  "true"
  { return new True(); }
}

Exp FalseLiteral() :
{}
{
  "false"
  { return new False(); }
}

Exp IdentifierExp() :
{ Token t; }
{
  t=<IDENTIFIER>
  { return new IdentifierExp(t.image); }
}

Exp ThisExpression() :
{}
{
  "this"
  { return new This(); }
}

Exp ArrayAllocationExpression() :
{ Exp e; }
{
  "new" "int" "[" e=Expression() "]"
  { return new NewArray(e); }
}

Exp AllocationExpression() :
{ Identifier i; }
{
  "new" i=Identifier() "(" ")"
  { return new NewObject(i); }
}

Exp NotExpression() :
{ Exp e; }
{
  "!" { Token tk=token; } e=Expression()
  { Not not=new Not(e); inject_token(not,tk); return not; }
}

Exp BracketExpression() :
{ Exp e; }
{
  "(" e=Expression() ")"
  { return e; }
}

Identifier Identifier() :
{ Token t; }
{
  t=<IDENTIFIER>
  { return new Identifier(t.image); }
}

JAVACODE
void inject_token(HasToken hasToken, Token token) {
  hasToken.setToken(token);
}
